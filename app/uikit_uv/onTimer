actprim.c:	if(act->onDismiss) (*act->onDismiss)(act);
actprim.c:	if(act->onDismiss) (*act->onDismiss)(act);
dlgalert.c:	get_keyvalue(act->intent, title+1, value);
dlgcheck.c:	p = act->intent;
dlgdigit.c:	p = act->intent;
dlgfldalert.c:	p = act->intent;
dlginput.c:	p = act->intent;
dlgpassword.c:	p = act->intent;
dlgpicker.c:	p = act->intent;
dlgprogress.c:	sprintf(act->intent, "%s=%s\n", title, message);
dlgprogress.c:	get_keyvalue(act->intent, title+1, value);
dlgslider.c:	p = act->intent;
dlgspinner2.c:	p = act->intent;
dlgspinner.c:	p = act->intent;
dlgtimerange.c:	p = act->intent;
dlguuid.c:	p = act->intent;
dlgwait.c:	get_keyvalue(act->intent, title+1, value);
gactivity.c:	return act->intent;
gapp.c:	UIframe(act->window, &rt);
gapp.c:		UIsetNeedsDisplayInRect(act->window, updateRect);
gapp.c:		UIdrawView(act->window, &rt);
gapp.c:		UIsetNeedsDisplayInRect(act->window, updateRect);
gapp.c:		UIdrawView(act->window, &rt);
gapp.c:		UIsetNeedsDisplayInRect(act->window, updateRect);
gapp.c:		UIdrawView(act->window, &rt);
gapp.c:		UIframe(act->window, &rt); rt.x = rt.y = 0;
gapp.c:		UIdrawView(act->window, &rt);
gapp.c:	UIframe(act->window, &_rt); wh = _rt.height;
gapp.c:		} else if(act->onAppMessage) {
gapp.c:			(*act->onAppMessage)(act, buf);
gapp.c:			UIframe(act->window, &rt); rt.x = rt.y = 0;
gapp.c:			UIdrawView(act->window, &rt);
gapp.c:		UIframe(act->window, &rt); rt.x = rt.y = 0;
gapp.c:		UIdrawView(act->window, &rt);
gapp.c:		UIframe(act->window, &rt); rt.x = rt.y = 0;
gapp.c:		UIdrawView(act->window, &rt);
gapp.c:	act->window = wnd;
gapp.c:	if(act->onCreate) (*act->onCreate)(act);
gapp.c:	UIsetNeedsDisplay(act->window);
gapp.c:	UIframe(act->window, &rt); rt.x = rt.y = 0;
gapp.c:	UIdrawView(act->window, &rt);
gapp.c:	if(act->onStart) (*act->onStart)(act);
gapp.c:		if(act->onDismiss) (*act->onDismiss)(act);
gapp.c:		act->window = wnd;
gapp.c:		act->onStop = act->onDestroy = NULL;
gapp.c:		wnd = act->window;
gapp.c:	act->startForResult = 0;
gapp.c:	if(intent && intent[0]) strcpy(act->intent, intent);
gapp.c:	else	act->intent[0] = 0;
gapp.c:	if(act->onCreate) (*act->onCreate)(act);
gapp.c:	if(act->onStart) (*act->onStart)(act);
gapp.c:	if(act->timeout) {
gapp.c:		uv_timer_start(&_timerApp, _OnAppTimer, act->timeout*1000, 0);
gapp.c:		act->window = wnd;
gapp.c:		act->onStop = act->onDestroy = NULL;
gapp.c:		wnd = act->window;
gapp.c:	act->startForResult = 1;
gapp.c:	act->requestCode = requestCode;
gapp.c:	if(intent && intent[0]) strcpy(act->intent, intent);
gapp.c:	else	act->intent[0] = 0;
gapp.c:	if(act->onCreate) (*act->onCreate)(act);
gapp.c:	if(act->onStart) (*act->onStart)(act);
gapp.c:	if(act->timeout) {
gapp.c:		uv_timer_start(&_timerApp, _OnAppTimer, act->timeout*1000, 0);
gapp.c:	if(act->onStop) (*act->onStop)(act);
gapp.c:	if(act->onDestroy) (*act->onDestroy)(act);
gapp.c:		if(act->startForResult && a->onActivityResult) (*a->onActivityResult)(a, act->requestCode, act->resultCode, act->intent);
gapp.c:		if(act->onDestroy) (*act->onDestroy)(act);
gapp.c:	if(act->onStart) (*act->onStart)(act);
gapp.c:	UIframe(act->window, &rt); rt.x = rt.y = 0;
gapp.c:	UIdrawView(act->window, &rt);
gapp.c:	if(act->timeout) {
gapp.c:		uv_timer_start(&_timerApp, _OnAppTimer, act->timeout*1000, 0);
pref.c:		ps = PSobjectAtIndex(act->psContext, index);
pref.c:	ps = PSobjectAtIndex(act->psContext, index);
pref.c:			ps = PSobjectAtIndex(act->psContext, val);
prefmenu.c:	act->psContext = pss;
prefmenu.c:	ps = act->psContext;
prefmenu.c:	ps = act->psContext;
prefmenu.c:	ps = PSscreenObjectAtIndex((PS_OBJECT *)act->psContext, index);
prefmenu.c:	ps = PSscreenObjectAtIndex(act->psContext, index);
uitimer.c:	if(act->onTimer) {
uitimer.c:		(*act->onTimer)(act, id);
